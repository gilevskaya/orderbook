{"version":3,"sources":["shared/useWebSocket.tsx","components/OrderBook.tsx","components/DeribitConnect.tsx","components/BitmexConnect.tsx","components/BinanceConnect.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConnectStatusNames","WebSocket","CONNECTING","OPEN","CLOSING","CLOSED","connectStatusName","status","useWebSocket","url","options","ws","React","useRef","messageQueue","useState","lastMessage","setLastMessage","readyState","setReadyState","sendMessage","useCallback","message","current","send","JSON","stringify","push","connect","newws","onopen","e","onOpen","onclose","onClose","onerror","onError","onmessage","msg","parse","data","useEffect","splice","forEach","TOrderBookSide","OrderBook","orderbook","lastPrice","depth","step","isSkipEmpty","bids","setBids","asks","setAsks","maxTotal","setMaxTotal","decimals","toString","split","length","entries","obasks","obbids","newAsksPrice","newBidsPrice","slice","bestAsk","bestBid","currDepth","newaskstotal","newbidstotal","map","price","entry","get","size","side","ASKS","total","BIDS","Math","max","reverse","i","key","isTop","className","toFixed","style","flex","OrderBookEntry","text","bg","bgWidth","round","toLocaleString","top","right","width","float","applyExchangeOrderBookEdits","edits","Map","edit","id","delete","indexOf","set","sortedInsert","filter","value","array","isAZ","a","sortedIndex","sortedIndexBy","x","useDeribitConnect","setOrderbook","setLastPrice","jsonrpc","method","params","channels","channel","change_id","mapEditFormat","ob","last_price","console","log","useBitmexConnect","obBitmexId","table","action","d","useBinanceConnect","oReq","XMLHttpRequest","addEventListener","currentTarget","response","lastUpdateId","convertEdits","open","u","b","parseFloat","c","priceStr","sizeBTC","Widget","children","OrderBookPage","bitmexConn","bitmexOrderbook","bitmexLastPrice","deribitConn","deribitOrderbook","deribitLastPrice","binanceConn","binanceOrderbook","binanceLastPrice","columns","rows","layout","bitmex","y","w","h","deribit","binance","gap","Item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6590d921.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type TConnectStatus =\n  | WebSocket[\"CONNECTING\"]\n  | WebSocket[\"OPEN\"]\n  | WebSocket[\"CLOSING\"]\n  | WebSocket[\"CLOSED\"];\n\nconst ConnectStatusNames = {\n  [WebSocket.CONNECTING]: \"Connecting\",\n  [WebSocket.OPEN]: \"Open\",\n  [WebSocket.CLOSING]: \"Closing\",\n  [WebSocket.CLOSED]: \"Closed\",\n};\n\nexport const connectStatusName = (status: TConnectStatus | -1): string =>\n  status === -1 ? \"Uninitiated\" : ConnectStatusNames[status];\n\nexport type WebSocketMessage =\n  | string\n  | ArrayBuffer\n  | SharedArrayBuffer\n  | Blob\n  | ArrayBufferView;\n\nexport function useWebSocket<R, T = WebSocketMessage>(\n  url: string,\n  options?: { onOpen?: Function; onClose?: Function; onError?: Function }\n) {\n  const ws = React.useRef<WebSocket | null>(null);\n  const messageQueue = React.useRef<T[]>([]);\n  const [lastMessage, setLastMessage] = React.useState<R | null>(null);\n  // WebSocket ready state fails to show clised\n  const [readyState, setReadyState] = React.useState<TConnectStatus | -1>(-1);\n  const sendMessage = React.useCallback((message: T) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      if (typeof message !== \"string\") {\n        ws.current.send(JSON.stringify(message));\n      } else ws.current.send(message);\n    } else messageQueue.current.push(message);\n  }, []);\n\n  const connect = React.useCallback((): WebSocket => {\n    const newws = new WebSocket(url);\n    setReadyState(WebSocket.CONNECTING);\n    newws.onopen = (e) => {\n      setReadyState(WebSocket.OPEN);\n      if (options?.onOpen) options.onOpen(e);\n    };\n    newws.onclose = (e) => {\n      setReadyState(WebSocket.CLOSED);\n      ws.current = null;\n      messageQueue.current = [];\n      if (options?.onClose) options.onClose(e);\n      ws.current = connect();\n    };\n    newws.onerror = (e) => {\n      setReadyState(WebSocket.CLOSED);\n      if (options?.onError) options.onError(e);\n    };\n    newws.onmessage = (e) => {\n      const msg = JSON.parse(e.data);\n      setLastMessage(msg);\n    };\n    return newws;\n  }, [url, options]);\n\n  React.useEffect(() => {\n    if (ws.current == null || ws.current.readyState === WebSocket.CLOSED) {\n      ws.current = connect();\n    } else if (ws.current.readyState === WebSocket.OPEN) {\n      messageQueue.current.splice(0).forEach(sendMessage);\n    }\n  }, [ws, connect, sendMessage]);\n\n  return { readyState, lastMessage, sendMessage };\n}\n","import React from \"react\";\nimport { sortedIndex, sortedIndexBy } from \"lodash\";\n\nexport enum TOrderBookSide {\n  BIDS = \"bids\",\n  ASKS = \"asks\",\n}\nexport type TOrderBookEdit = {\n  id: number;\n  price: number;\n  size: number;\n  sizeBTC?: number;\n};\ntype TOrderBookEntryBase = {\n  side: TOrderBookSide;\n  price: number;\n  size: number;\n  sizeBTC?: number;\n  total: number;\n};\nexport type TOrderBookEntry = TOrderBookEntryBase & {\n  id: number;\n};\nexport type TOrderBookEntries = Map<number, TOrderBookEntry>;\nexport type TOrderBook = {\n  entries: TOrderBookEntries;\n  asks: number[];\n  bids: number[];\n};\n\nexport const OrderBook = ({\n  orderbook,\n  lastPrice,\n  depth,\n  step,\n  isSkipEmpty,\n}: {\n  orderbook: TOrderBook;\n  lastPrice: number;\n  depth: number;\n  step: number;\n  isSkipEmpty?: boolean;\n}) => {\n  const [bids, setBids] = React.useState<TOrderBookEntryBase[]>([]);\n  const [asks, setAsks] = React.useState<TOrderBookEntryBase[]>([]);\n  const [maxTotal, setMaxTotal] = React.useState<number | null>(null);\n\n  const decimals = step.toString().split(\".\")[1].length || 0;\n\n  React.useEffect(() => {\n    if (orderbook == null) return;\n    const { entries, asks: obasks, bids: obbids } = orderbook;\n    if (obasks.length === 0 || obbids.length === 0) return;\n    let newAsksPrice: number[] = [];\n    let newBidsPrice: number[] = [];\n\n    if (isSkipEmpty) {\n      newAsksPrice = obasks.slice(0, depth);\n      newBidsPrice = obbids.slice(0, depth);\n    } else {\n      const bestAsk = obasks[0];\n      const bestBid = obbids[0];\n      for (let currDepth = 0; currDepth < depth; currDepth++) {\n        newBidsPrice.push(bestBid - currDepth * step);\n        newAsksPrice.push(bestAsk + currDepth * step);\n      }\n    }\n    let newaskstotal = 0;\n    let newbidstotal = 0;\n    setAsks(\n      newAsksPrice.map((price) => {\n        const entry = entries.get(price);\n        const size = entry ? entry.size : 0;\n        newaskstotal += size;\n        return {\n          side: TOrderBookSide.ASKS,\n          price,\n          size: size,\n          total: newaskstotal,\n        };\n      })\n    );\n    setBids(\n      newBidsPrice.map((price) => {\n        const entry = entries.get(price);\n        const size = entry ? entry.size : 0;\n        newbidstotal += size;\n        return {\n          side: TOrderBookSide.BIDS,\n          price,\n          size: size,\n          total: newbidstotal,\n        };\n      })\n    );\n    setMaxTotal(Math.max(newaskstotal, newbidstotal));\n  }, [orderbook, depth, isSkipEmpty, step]);\n\n  if (!orderbook || !lastPrice || !maxTotal) return null;\n  return (\n    <div>\n      {[...asks].reverse().map(({ price, size, total }, i) => (\n        <OrderBookEntry\n          key={`a-${price}-${size}`}\n          isTop={i === 0}\n          decimals={decimals}\n          side={TOrderBookSide.ASKS}\n          price={price}\n          size={size}\n          total={total}\n          maxTotal={maxTotal}\n        />\n      ))}\n      <div className=\"flex py-1\">\n        <div className=\"flex-1 text-right\">{lastPrice.toFixed(decimals)}</div>\n        <div className=\"\" style={{ flex: \"2 2 0%\" }}></div>\n      </div>\n      {bids.map(({ price, size, total }, i) => (\n        <OrderBookEntry\n          key={`b-${price}-${size}`}\n          isTop={i === 0}\n          decimals={decimals}\n          side={TOrderBookSide.BIDS}\n          price={price}\n          size={size}\n          total={total}\n          maxTotal={maxTotal}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst OrderBookEntry = ({\n  price,\n  size,\n  total,\n  side,\n  decimals,\n  isTop,\n  maxTotal,\n}: TOrderBookEntryBase & {\n  isTop?: boolean;\n  decimals: number;\n  maxTotal: number;\n}) => {\n  const text = side === TOrderBookSide.ASKS ? \"text-red-500\" : \"text-green-500\";\n  const bg = side === TOrderBookSide.ASKS ? \"bg-red-600\" : \"bg-green-700\";\n  const bgWidth = Math.round((total / maxTotal) * 95); // 95 instead of 100 to make it pretty\n  return (\n    <div\n      className={`font-mono flex text-xs flex border-gray-700 border-b ${isTop ? \"border-t\" : \"\"\n        } border-dashed text-right`}\n    >\n      <div className={`w-16 ${text}`}>{price.toFixed(decimals)}</div>\n\n      <div className=\"flex-1 text-gray-600\">{size.toLocaleString()}</div>\n      <div className=\"flex-1 relative\">\n        <div className=\"z-10 absolute w-full\" style={{ top: 0, right: 0 }}>\n          {total.toLocaleString()}\n        </div>\n        <div\n          className={`${bg} opacity-50 h-full`}\n          style={{ width: `${bgWidth}%`, float: \"right\" }} // transform: `scaleX(${0.2})`\n        ></div>\n      </div>\n    </div>\n  );\n};\n\n// ...\n\nexport function applyExchangeOrderBookEdits<T>(\n  orderbook: TOrderBook | null,\n  edits: Array<{\n    side: TOrderBookSide;\n    edit: TOrderBookEdit;\n  }>,\n  step: number = 0.5 // TODO: ...\n): TOrderBook | null {\n  let { entries, asks, bids }: TOrderBook =\n    orderbook != null ? orderbook : { entries: new Map(), asks: [], bids: [] };\n\n  for (const { side, edit } of edits) {\n    const { price, size, id } = edit;\n\n    if (size === 0) {\n      // deletion\n      entries.delete(price);\n      if (side === TOrderBookSide.ASKS) {\n        const i = asks.indexOf(price);\n        if (i !== -1) delete asks[i];\n      } else {\n        const i = bids.indexOf(price);\n        if (i !== -1) delete bids[i];\n      }\n    } else {\n      // insert\n      entries.set(price, { side, price, size, total: 0, id });\n      if (side === TOrderBookSide.ASKS) {\n        if (asks.indexOf(price) === -1) {\n          asks = sortedInsert(price, asks, true);\n        }\n      } else {\n        if (bids.indexOf(price) === -1) {\n          bids = sortedInsert(price, bids, false);\n        }\n      }\n    }\n  }\n  return {\n    entries,\n    asks: asks.filter((e) => e),\n    bids: bids.filter((e) => e),\n  };\n}\n\nfunction sortedInsert(value: number, array: number[], isAZ: boolean) {\n  const a = [...array];\n  if (isAZ) a.splice(sortedIndex(array, value), 0, value);\n  else\n    a.splice(\n      sortedIndexBy(array, value, (x) => -x),\n      0,\n      value\n    );\n  return a;\n}\n","// https://docs.deribit.com/#json-rpc\nimport React from \"react\";\n\nimport { useWebSocket } from \"../shared/useWebSocket\";\nimport {\n  applyExchangeOrderBookEdits,\n  TOrderBook,\n  TOrderBookSide,\n} from \"./OrderBook\";\n\nconst WS_URL_DERIBIT = \"wss://www.deribit.com/ws/api/v2\";\n\ntype TDeribitOrderBookEdit = [\"new\" | \"change\" | \"delete\", number, number]; // type, price, size\ntype TDeribitOrderBookMessage = {\n  params: {\n    channel: \"book.BTC-PERPETUAL.raw\";\n    data: {\n      asks: TDeribitOrderBookEdit[];\n      bids: TDeribitOrderBookEdit[];\n      change_id: number;\n    };\n  };\n};\ntype TDeribitTickerMessage = {\n  params: {\n    channel: \"ticker.BTC-PERPETUAL.raw\";\n    data: {\n      last_price: number;\n      best_bid_price: number;\n      best_ask_price: number;\n    };\n  };\n};\ntype TDeribitMessage = TDeribitOrderBookMessage | TDeribitTickerMessage;\n\nexport const useDeribitConnect = () => {\n  const [orderbook, setOrderbook] = React.useState<TOrderBook | null>(null);\n  const [lastPrice, setLastPrice] = React.useState<number | null>(null);\n  const { readyState, lastMessage, sendMessage } = useWebSocket<\n    TDeribitMessage\n  >(WS_URL_DERIBIT, {\n    onOpen: () => {\n      sendMessage(\n        JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: 3600,\n          method: \"public/subscribe\",\n          params: {\n            channels: [\n              \"book.BTC-PERPETUAL.raw\",\n              // \"trades.BTC-PERPETUAL.raw\",\n              \"ticker.BTC-PERPETUAL.raw\",\n            ],\n          },\n        })\n      );\n    },\n    onClose: () => {\n      setOrderbook(null);\n      setLastPrice(null);\n    },\n  });\n\n  React.useEffect(() => {\n    if (!lastMessage?.params?.data) return;\n\n    switch (lastMessage.params.channel) {\n      case \"book.BTC-PERPETUAL.raw\": {\n        const { bids, asks, change_id: id } = lastMessage.params.data;\n\n        const mapEditFormat = (edit: TDeribitOrderBookEdit) => {\n          const [, price, size] = edit;\n          return { id, price, size };\n        };\n\n        setOrderbook((ob) =>\n          applyExchangeOrderBookEdits<TDeribitOrderBookEdit>(ob, [\n            ...asks.map((edit) => ({\n              side: TOrderBookSide.ASKS,\n              edit: mapEditFormat(edit),\n            })),\n            ...bids.map((edit) => ({\n              side: TOrderBookSide.BIDS,\n              edit: mapEditFormat(edit),\n            })),\n          ])\n        );\n        break;\n      }\n      case \"ticker.BTC-PERPETUAL.raw\": {\n        setLastPrice(lastMessage.params.data.last_price);\n        break;\n      }\n      default: {\n        console.log(\"deribit\", lastMessage);\n      }\n    }\n  }, [lastMessage]);\n\n  return { readyState, orderbook, lastPrice };\n};\n","// https://www.bitmex.com/app/wsAPI\nimport React from \"react\";\n\nimport { useWebSocket } from \"../shared/useWebSocket\";\nimport {\n  applyExchangeOrderBookEdits,\n  TOrderBook,\n  TOrderBookSide,\n} from \"./OrderBook\";\n\nconst WS_URL_BITMEX =\n  \"wss://www.bitmex.com/realtime?subscribe=orderBookL2:XBTUSD,trade:XBTUSD\";\n\ntype TBitmexSide = \"Sell\" | \"Buy\";\ntype TBitmexOrderBookEdit_Base = { id: number; side: TBitmexSide };\ntype TBitmexOrderBookEdit = TBitmexOrderBookEdit_Base & {\n  price: number;\n  size: number;\n  timestamp: number;\n};\ntype TBitmexOrderbookEditMessage = { table: \"orderBookL2\" } & (\n  | { action: \"partial\"; data: TBitmexOrderBookEdit[] }\n  | { action: \"update\"; data: TBitmexOrderBookEdit[] }\n  | { action: \"insert\"; data: TBitmexOrderBookEdit[] }\n  | { action: \"delete\"; data: TBitmexOrderBookEdit_Base[] }\n);\ntype TBitmexTradeTickDirection =\n  | \"MinusTick\"\n  | \"ZeroMinusTick\"\n  | \"PlusTick\"\n  | \"ZeroPlusTick\";\ntype TBitmexTradeMessage = {\n  table: \"trade\";\n  data: Array<{\n    side: TBitmexSide;\n    price: number;\n    size: number;\n    timestamp: number;\n    tickDirection: TBitmexTradeTickDirection;\n  }>;\n};\ntype TBitmexMessage = TBitmexOrderbookEditMessage | TBitmexTradeMessage;\n\nexport const useBitmexConnect = () => {\n  const [orderbook, setOrderbook] = React.useState<TOrderBook | null>(null);\n  const [lastPrice, setLastPrice] = React.useState<number | null>(null);\n  const obBitmexId = React.useRef<Map<number, number>>(new Map());\n  const { readyState, lastMessage } = useWebSocket<TBitmexMessage>(\n    WS_URL_BITMEX,\n    {\n      onClose: () => {\n        setOrderbook(null);\n        setLastPrice(null);\n        obBitmexId.current = new Map();\n      },\n    }\n  );\n\n  React.useEffect(() => {\n    if (!lastMessage) return;\n    switch (lastMessage.table) {\n      case \"orderBookL2\": {\n        if (\n          lastMessage.action === \"partial\" ||\n          lastMessage.action === \"insert\"\n        ) {\n          const edits = lastMessage.data.map(({ id, side, size, price }) => {\n            obBitmexId.current.set(id, price);\n            return {\n              side: side === \"Buy\" ? TOrderBookSide.BIDS : TOrderBookSide.ASKS,\n              edit: { id, size, price },\n            };\n          });\n          setOrderbook((ob) =>\n            applyExchangeOrderBookEdits<TBitmexOrderBookEdit>(\n              lastMessage.action === \"partial\" ? null : ob,\n              edits\n            )\n          );\n        } else if (\n          lastMessage.action === \"update\" ||\n          lastMessage.action === \"delete\"\n        ) {\n          // @ts-ignore\n          const edits = lastMessage.data.map((edit) => {\n            const { id, side } = edit;\n            const price = obBitmexId.current.get(id) || 0; // >.<\n            const size = lastMessage.action === \"update\" ? edit.size : 0;\n            return {\n              side: side === \"Buy\" ? TOrderBookSide.BIDS : TOrderBookSide.ASKS,\n              edit: { id, size, price },\n            };\n          });\n          setOrderbook((ob) =>\n            applyExchangeOrderBookEdits<TBitmexOrderBookEdit>(ob, edits)\n          );\n        }\n        break;\n      }\n      case \"trade\": {\n        lastMessage.data.forEach((d) => setLastPrice(d.price));\n        break;\n      }\n      default: {\n        console.log(\"bitmex\", lastMessage);\n      }\n    }\n  }, [lastMessage]);\n\n  return { readyState, orderbook, lastPrice };\n};\n","// https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md\nimport React from \"react\";\n\nimport { useWebSocket } from \"../shared/useWebSocket\";\nimport {\n  applyExchangeOrderBookEdits,\n  TOrderBook,\n  TOrderBookSide,\n} from \"./OrderBook\";\n\nconst WS_URL_BINANCE = \"wss://stream.binance.com/ws\";\nconst OB_STEP_BINANCE = 0.01;\n\ntype TBinanceOrderBookEdit = [string, number]; // price, sizeBTC\ntype TBinanceOrderbookMessage = {\n  e: \"depthUpdate\";\n  E: number; // Event time\n  u: number; // Final update ID in event\n  a: Array<TBinanceOrderBookEdit>;\n  b: Array<TBinanceOrderBookEdit>;\n};\ntype TBinanceTicker = {\n  e: \"24hrTicker\";\n  p: number; // Price change\n  P: number; // Price change percent\n  c: string; // Last price\n  Q: number; // Last quantity\n  b: number; // Best bid price\n  a: number; // Best ask price\n};\ntype TBinanceMessage = TBinanceOrderbookMessage | TBinanceTicker;\n\nexport const useBinanceConnect = () => {\n  const [orderbook, setOrderbook] = React.useState<TOrderBook | null>(null);\n  const [lastPrice, setLastPrice] = React.useState<number | null>(null);\n  const { readyState, lastMessage, sendMessage } = useWebSocket<\n    TBinanceMessage\n  >(WS_URL_BINANCE, {\n    onOpen: () => {\n      sendMessage(\n        JSON.stringify({\n          method: \"SUBSCRIBE\",\n          params: [\"btcusdt@depth\", \"btcusdt@ticker\"],\n          id: 1, // required by binance >.<\n        })\n      );\n    },\n    onClose: () => {\n      setOrderbook(null);\n      setLastPrice(null);\n    },\n  });\n\n  React.useEffect(() => {\n    const oReq = new XMLHttpRequest();\n    oReq.addEventListener(\"load\", (e: any) => {\n      const data = JSON.parse(e.currentTarget.response);\n      const { lastUpdateId, bids, asks } = data;\n      setOrderbook(() =>\n        applyExchangeOrderBookEdits<TBinanceOrderBookEdit>(\n          null,\n          convertEdits(asks, bids, lastUpdateId),\n          OB_STEP_BINANCE\n        )\n      );\n      // TODO: ...\n      // const filtered = new Map();\n      // if (obEntries.current != null) {\n      //   obEntries.current.forEach((e, price) => {\n      //     if (e.id > lastUpdateId) filtered.set(price, e);\n      //   });\n      //   obEntries.current = filtered;\n      // }\n      // const tt = { entries: new Map(), bestAsk: 0, bestBid: 0 };\n      // applyExchangeOrderBookEdits(tt);\n    });\n    oReq.open(\n      \"GET\",\n      \"https://www.binance.com/api/v1/depth?symbol=BTCUSDT&limit=1000\"\n    );\n    oReq.send();\n  }, []);\n\n  React.useEffect(() => {\n    if (!lastMessage) return;\n    switch (lastMessage.e) {\n      case \"depthUpdate\": {\n        const { u: lastUpdateId, a: asks, b: bids } = lastMessage;\n        setOrderbook((ob) => {\n          if (ob == null) return null;\n          return applyExchangeOrderBookEdits<TBinanceOrderBookEdit>(\n            ob,\n            convertEdits(asks, bids, lastUpdateId),\n            OB_STEP_BINANCE\n          );\n        });\n        break;\n      }\n      case \"24hrTicker\": {\n        const lastPrice = parseFloat(lastMessage.c);\n        setLastPrice(lastPrice);\n        break;\n      }\n      default: {\n        console.log(\"binance\", lastMessage);\n      }\n    }\n  }, [lastMessage]);\n\n  return {\n    readyState,\n    orderbook, // : { entries: new Map(), bestBid: -1, bestAsk: -1 }\n    lastPrice,\n  };\n};\n\nconst mapEditFormat = (id: number) => (edit: TBinanceOrderBookEdit) => {\n  const [priceStr, sizeBTC] = edit;\n  const price = parseFloat(priceStr) || 0;\n  return { id, price, size: Math.round(sizeBTC * price) };\n};\n\nconst convertEdits = (\n  asks: TBinanceOrderBookEdit[],\n  bids: TBinanceOrderBookEdit[],\n  lastUpdateId: number\n) => [\n  ...asks.map((edit: TBinanceOrderBookEdit) => ({\n    side: TOrderBookSide.ASKS,\n    edit: mapEditFormat(lastUpdateId)(edit),\n  })),\n  ...bids.map((edit: TBinanceOrderBookEdit) => ({\n    side: TOrderBookSide.BIDS,\n    edit: mapEditFormat(lastUpdateId)(edit),\n  })),\n];\n","import React from \"react\";\nimport Dashboard from \"react-grid-dashboard\";\n\nimport { useDeribitConnect } from \"./components/DeribitConnect\";\nimport { useBitmexConnect } from \"./components/BitmexConnect\";\nimport { useBinanceConnect } from \"./components/BinanceConnect\";\n\nimport { OrderBook } from \"./components/OrderBook\";\nimport { connectStatusName } from \"./shared/useWebSocket\";\n\nfunction App() {\n  return (\n    <div className=\"h-screen bg-gray-900 text-gray-200 p-1 flex flex-col\">\n      <OrderBookPage />\n    </div>\n  );\n}\n\nconst Widget = ({\n  children,\n}: {\n  children: React.ReactElement | Array<React.ReactElement>;\n}) => (\n  <div className=\"h-full w-full border border-gray-700 rounded-sm flex flex-col\">\n    {children}\n  </div>\n);\n\nconst OrderBookPage = () => {\n  const {\n    readyState: bitmexConn,\n    orderbook: bitmexOrderbook,\n    lastPrice: bitmexLastPrice,\n  } = useBitmexConnect();\n  const {\n    readyState: deribitConn,\n    orderbook: deribitOrderbook,\n    lastPrice: deribitLastPrice,\n  } = useDeribitConnect();\n  const {\n    readyState: binanceConn,\n    orderbook: binanceOrderbook,\n    lastPrice: binanceLastPrice,\n  } = useBinanceConnect();\n\n  const depth = 20;\n\n  return (\n    <Dashboard\n      columns={3}\n      rows={1}\n      layout={{\n        bitmex: { x: 1, y: 1, w: 1, h: 1 },\n        deribit: { x: 2, y: 1, w: 1, h: 1 },\n        binance: { x: 3, y: 1, w: 1, h: 1 },\n      }}\n      gap={\"5pt\"}\n    >\n      <Dashboard.Item id=\"bitmex\">\n        <Widget>\n          <div className=\"p-2 pt-1 flex-1 flex flex-col\">\n            <div className=\"pb-1\">\n              BitMEX:{\" \"}\n              <span className=\"font-semibold\">\n                {connectStatusName(bitmexConn)}\n              </span>\n            </div>\n            {bitmexOrderbook && bitmexLastPrice && (\n              <OrderBook\n                orderbook={bitmexOrderbook}\n                lastPrice={bitmexLastPrice}\n                depth={depth}\n                step={0.5}\n              />\n            )}\n          </div>\n        </Widget>\n      </Dashboard.Item>\n\n      <Dashboard.Item id=\"deribit\">\n        <Widget>\n          <div className=\"p-2 pt-1 flex-1 flex flex-col\">\n            <div className=\"pb-1\">\n              Deribit:{\" \"}\n              <span className=\"font-semibold\">\n                {connectStatusName(deribitConn)}\n              </span>\n            </div>\n            {deribitOrderbook && deribitLastPrice && (\n              <OrderBook\n                orderbook={deribitOrderbook}\n                lastPrice={deribitLastPrice}\n                depth={depth}\n                step={0.5}\n              />\n            )}\n          </div>\n        </Widget>\n      </Dashboard.Item>\n\n      <Dashboard.Item id=\"binance\">\n        <Widget>\n          <div className=\"p-2 pt-1 flex-1 flex flex-col\">\n            <div className=\"pb-1\">\n              Binance:{\" \"}\n              <span className=\"font-semibold\">\n                {connectStatusName(binanceConn)}\n              </span>\n            </div>\n            {binanceOrderbook && binanceLastPrice && (\n              <OrderBook\n                orderbook={binanceOrderbook}\n                lastPrice={binanceLastPrice}\n                depth={depth}\n                step={0.01}\n                isSkipEmpty={true}\n              />\n            )}\n          </div>\n        </Widget>\n      </Dashboard.Item>\n    </Dashboard>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport { useWebSocket, connectStatusName } from \"./shared/useWebSocket\";\nexport { useDeribitConnect } from \"./components/DeribitConnect\";\nexport { useBitmexConnect } from \"./components/BitmexConnect\";\nexport { useBinanceConnect } from \"./components/BinanceConnect\";\n"],"sourceRoot":""}